plot(model.full, which=4) #Cook?s distance
(kryt.Cook<-4/dim(zbior.uczacy)[1])
abline(h=kryt.Cook, col=2)
# WYB?R MODELU
head(zbior.uczacy)
library(leaps)
# Ilo?ciowe zmienne obja?niaj?ce
leaps( x=zbior.uczacy[,2:4], y=zbior.uczacy[,1], names=names(zbior.uczacy)[2:4], method="Cp")
# Wszystkie zmienne obja?niaj?ce
# 1 spos?b
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
setwd("C:/Users/tazza/Desktop/R zadanie/program")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-3])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,3], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-3])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
# Wczytanie bazy danych:
dane <-read.csv2("dane_C2.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
# Wczytanie bazy danych:
dane <-read.csv2("dane_C2.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
setwd("C:/Users/tazza/Desktop/R zadanie/rmateriay")
modele.1<-regsubsets(m2.price~. , data = zbior.uczacy,nbest=3)
# Wczytanie bazy danych:
dane <-read.csv2("mieszkania.csv") #Wczytanie zbioru ucz?cego
head(dane)
rok<-data.frame(rok.umowy=as.factor(dane$rok.umowy))
dane<-dane[,-2]
head(dane)
dane<-cbind(dane,rok)
head(dane)
levels(dane$rok.umowy)
#Losowanie zbioru ucz?cego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
head(zbior.uczacy)
#attach(zbior.uczacy)
#names(zbior.uczacy)
# 1. Estymacja parametr?w modelu, w kt?rym zmiennymi obaja?niaj?cymi s? wszystkie zmienne ilo?ciowe:
model.ilosciowe <- lm(m2.price~ surface + n.rooms + floor+ odleglosc , data = zbior.uczacy)
# Wyniki estymacji:
(wyniki.ilosciowe<-summary(model.ilosciowe))
# Oszacowane parametry modelu
(beta.hat.ilosciowe<-coef(model.ilosciowe))
# 2. Estymacja parametr?w modelu, w kt?rym uwzgl?dniono wszystkie zmienne obja?niaj?ce:
model.full<- lm(m2.price~. , data = zbior.uczacy)
# Wyniki estymacji:
(wyniki.full<-summary(model.full))
# Oszacowane parametry modelu
(beta.hat.full<-coef(model.full))
plot(model.full, which=1) #Residuals vs Fitted
plot(model.full, which=2) #Normal Q-Q
plot(model.full, which=3) #Scale Location
plot(model.full, which=4) #Cook?s distance
plot(model.full, which=5) #Residuals vs Leverage
plot(model.full, which=6) #Cook?s dist vs Leverage
plot(model.full, which=4) #Cook?s distance
(kryt.Cook<-4/dim(zbior.uczacy)[1])
abline(h=kryt.Cook, col=2)
# WYB?R MODELU
head(zbior.uczacy)
library(leaps)
# Ilo?ciowe zmienne obja?niaj?ce
leaps( x=zbior.uczacy[,2:4], y=zbior.uczacy[,1], names=names(zbior.uczacy)[2:4], method="Cp")
# Wszystkie zmienne obja?niaj?ce
# 2 spos?b
modele.1<-regsubsets(m2.price~. , data = zbior.uczacy,nbest=3)
modele.wynik<-summary(modele.1)
as.matrix(modele.wynik$adjr2)
as.matrix(modele.wynik$cp)
as.matrix(modele.wynik$bic)
modele.razem<-cbind(1:length(as.matrix(modele.wynik$adjr2)), as.matrix(modele.wynik$which))
plot(as.matrix(modele.wynik$adjr2), as.matrix(modele.wynik$bic))
modele.razem[(modele.wynik$adjr2==max(modele.wynik$adjr2)) & (modele.wynik$bic==min(modele.wynik$bic)),]
modele.razem[(modele.wynik$adjr2==max(modele.wynik$adjr2)),]
modele.razem[(modele.wynik$bic==min(modele.wynik$bic)),]
setwd("C:/Users/tazza/Desktop/R zadanie/program")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
# 2. Estymacja parametr?w modelu, w kt?rym uwzgl?dniono wszystkie zmienne obja?niaj?ce:
model.full<- lm(m2.price~. , data = zbior.uczacy)
# 2. Estymacja parametr?w modelu, w kt?rym uwzgl?dniono wszystkie zmienne obja?niaj?ce:
model.full<- lm(Rating~. , data = zbior.uczacy)
# Wyniki estymacji:
(wyniki.full<-summary(model.full))
# Oszacowane parametry modelu
(beta.hat.full<-coef(model.full))
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-3])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,3], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-3])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-4])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-4])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,4], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
#macierz.X<-as.data.frame(macierz.X[,-4])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,4], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
#macierz.X<-as.data.frame(macierz.X[,-4])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-4])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
# Wczytanie bazy danych:
dane <-read.csv2("dane_C.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
# Wczytanie bazy danych:
dane <-read.csv2("dane_C2.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
library(leaps)
macierz.X<-model.matrix(~ ., data = zbior.uczacy)
macierz.X<-as.data.frame(macierz.X[,-1])
head(macierz.X)
modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
modele$which
modele$label
modele$size
modele$Cp
roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
dim(modele$which)[1]
min(roznica)
modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
modele$size[-length(modele$size)][roznica==min(roznica)]
modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
# Wczytanie bazy danych:
dane <-read.csv2("dane_C2.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
#2 sposob 3
model.full<- lm(Rating~. , data = zbior.uczacy)
wybrany.model<-step(model.full, direction = "backward", trace=FALSE )
step(model.full, direction = "backward", trace=TRUE )
step(model.full, direction = "forward", trace=FALSE )
step(model.full, direction = "both", trace=FALSE )
summary(wybrany.model)
# Wczytanie bazy danych:
dane <-read.csv2("dane_C2.csv") #Wczytanie zbioru uczacego
#1
#Losowanie zbioru uczacego
set.seed(1234)
(rozmiar.proby <- 0.60 * nrow(dane))
(index = sample(seq_len(nrow(dane)), size = rozmiar.proby ))
zbior.uczacy <-dane[index, ]
zbior.testowy<-dane[-index,]
####
#2
# library(leaps)
#
# macierz.X<-model.matrix(~ ., data = zbior.uczacy)
# macierz.X<-as.data.frame(macierz.X[,-1])
# head(macierz.X)
# modele<-leaps( x=macierz.X, y=zbior.uczacy[,1], names=names(macierz.X), method="Cp")
# modele$which
# modele$label
# modele$size
# modele$Cp
#
# roznica<-abs(modele$Cp-modele$size)[-dim(modele$which)[1]]
#
# dim(modele$which)[1]
# min(roznica)
# modele$Cp[-length(modele$Cp)][roznica==min(roznica)]
# modele$size[-length(modele$size)][roznica==min(roznica)]
# modele$which[-length(modele$size)[1],][roznica==min(roznica),]
####
#2 sposob 3
model.full<- lm(Rating~. , data = zbior.uczacy)
wybrany.model<-step(model.full, direction = "both", trace=FALSE )
# step(model.full, direction = "backward", trace=TRUE )
# step(model.full, direction = "forward", trace=FALSE )
# step(model.full, direction = "both", trace=FALSE )
summary(wybrany.model)
